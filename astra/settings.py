"""
Django settings for astra project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
IMG_PATH = os.path.join(MEDIA_ROOT, "images")
SOUND_PATH = os.path.join(MEDIA_ROOT, "sound")
TTS_PATH = os.path.join(MEDIA_ROOT, "tts")
ARTICLE_PATH = os.path.join(MEDIA_ROOT, "article")
VIDEO_PATH = os.path.join(MEDIA_ROOT, "videos")
LOGO_PATH = os.path.join(MEDIA_ROOT, "logo")
FONTS_PATH = os.path.join(MEDIA_ROOT, 'fonts')
EFFECT_PATH = os.path.join(MEDIA_ROOT, 'effect')

ALL_PATHS = [MEDIA_ROOT, IMG_PATH, SOUND_PATH, LOGO_PATH, FONTS_PATH, EFFECT_PATH, TTS_PATH, ARTICLE_PATH]
for path in ALL_PATHS:
    if not os.path.exists(path):
        os.makedirs(path)

MEDIA_URL = '/media/'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vls7q-d5q)l$fi99)hq*a^y(=hahdsng0po&tegl&8bz6til)s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["10.67.0.165", "127.0.0.1", "localhost", "10.67.0.92"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',  # 添加CORS支持
    'drf_yasg',
    'rest_framework',
    'rest_framework.authtoken',
    'image',
    'voice',
    'video',
    'tag',
    'tools',
    'account',
    'task',
    'text',
    'asset',
    'django_apscheduler'
]
SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'DEFAULT_FIELD_INSPECTORS': [
        'drf_yasg.inspectors.CamelCaseJSONFilter',
        'drf_yasg.inspectors.InlineSerializerInspector',
        'drf_yasg.inspectors.RelatedFieldInspector',
        'drf_yasg.inspectors.ChoiceFieldInspector',
        'drf_yasg.inspectors.FileFieldInspector',
        'drf_yasg.inspectors.DictFieldInspector',
        'drf_yasg.inspectors.SimpleFieldInspector',
        'drf_yasg.inspectors.StringDefaultFieldInspector',
    ],
    'SECURITY_DEFINITIONS': {
        'Token': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'description': 'Enter the token in the format `Token <your_token>`'
        }
    }
}
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        # 保留Token认证作为备选方案，用于API接口访问
        'rest_framework.authentication.TokenAuthentication',
    ),

    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS中间件，必须在最前面
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # 启用CSRF保护
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'astra.urls'

APSCHEDULER_DISPLAY_ERROR_DETAILS = {
    'staff': True,  # 管理员可见完整错误
    'user': False,  # 普通用户不可见
    'public': False  # 未认证用户不可见
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'astra.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
TIME_ZONE = 'Asia/Shanghai'
DATABASES = {
    'default': {
        'TIME_ZONE': TIME_ZONE,
        'ENGINE': 'django.db.backends.postgresql',
        'OPTIONS': {
            'options': '-c search_path=django,public'
        },
        'NAME': 'videos',
        'USER': 'postgres',
        'PASSWORD': 'nsf0cus.@123',
        'HOST': '39.98.165.125',  # 或者使用数据库服务器的IP地址
        'PORT': '12345'  # 默认PostgreSQL端口

    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {pathname}:{lineno} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'image_handler': {
            'level': 'DEBUG',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'image.log'),
            'encoding': 'utf-8',
            'maxBytes': 1024 * 1024 * 50,  # 5MB
            'backupCount': 7,
            'formatter': 'verbose',
            'use_gzip': False,
            'delay': True,
        },
        'voice_handler': {
            'level': 'DEBUG',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'voice.log'),
            'encoding': 'utf-8',
            'maxBytes': 1024 * 1024 * 50,  # 5MB
            'backupCount': 7,
            'formatter': 'verbose',
            'use_gzip': False,
            'delay': True,
        },
        'video_handler': {
            'level': 'DEBUG',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'video.log'),
            'encoding': 'utf-8',
            'maxBytes': 1024 * 1024 * 50,  # 5MB
            'backupCount': 7,
            'formatter': 'verbose',
            'use_gzip': False,
            'delay': True,
        },
        'tag_handler': {
            'level': 'DEBUG',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'tag.log'),
            'encoding': 'utf-8',
            'maxBytes': 1024 * 1024 * 50,  # 5MB
            'backupCount': 7,
            'formatter': 'verbose',
            'use_gzip': False,
            'delay': True,
        },
        'util_handler': {
            'level': 'DEBUG',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'util.log'),
            'encoding': 'utf-8',
            'maxBytes': 1024 * 1024 * 50,  # 5MB
            'backupCount': 7,
            'formatter': 'verbose',
            'use_gzip': False,
            'delay': True,
        },
        'text_handler': {
            'level': 'DEBUG',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'text.log'),
            'encoding': 'utf-8',
            'maxBytes': 1024 * 1024 * 50,  # 5MB
            'backupCount': 7,
            'formatter': 'verbose',
            'use_gzip': False,
            'delay': True,
        },
        'asset_handler': {
            'level': 'DEBUG',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'asset.log'),
            'encoding': 'utf-8',
            'maxBytes': 1024 * 1024 * 50,  # 5MB
            'backupCount': 7,
            'formatter': 'verbose',
            'use_gzip': False,
            'delay': True,
        }
    },
    'loggers': {
        'image': {
            'handlers': ['image_handler'],
            'level': 'INFO',
            'propagate': True,
        },
        'voice': {
            'handlers': ['voice_handler'],
            'level': 'INFO',
            'propagate': True,
        },
        'video': {
            'handlers': ['video_handler'],
            'level': 'INFO',
            'propagate': True,
        },
        'tag': {
            'handlers': ['tag_handler'],
            'level': 'INFO',
            'propagate': True,
        },
        'util': {
            'handlers': ['util_handler'],
            'level': 'INFO',
            'propagate': True,
        },
        'text': {
            'handlers': ['text_handler'],
            'level': 'INFO',
            'propagate': True,
        },
        'asset': {
            'handlers': ['asset_handler'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

#FFMPEG_PATH = r"C:\ffmpeg-7.1.1-full_build\bin\ffmpeg.exe"

# Session 配置
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # 使用数据库存储session
SESSION_COOKIE_AGE = 60 * 60 * 24 * 7  # Session过期时间：7天
SESSION_COOKIE_NAME = 'sessionid'  # Session cookie名称
SESSION_SAVE_EVERY_REQUEST = True  # 每次请求都更新session过期时间
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # 浏览器关闭时不过期
SESSION_COOKIE_HTTPONLY = True  # 防止XSS攻击
SESSION_COOKIE_SECURE = False  # 开发环境设为False，生产环境应设为True
SESSION_COOKIE_SAMESITE = 'Lax'  # CSRF保护

# CORS 配置（如果需要跨域）
CORS_ALLOW_CREDENTIALS = True  # 允许携带认证信息
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React开发服务器
    "http://127.0.0.1:3000",
    "http://localhost:8080",  # Vue开发服务器
    "http://127.0.0.1:8080",
    "http://localhost:5175",  # Vite开发服务器
    "http://127.0.0.1:5175",
    "http://localhost:8089",  # 本地测试
    "http://127.0.0.1:8089",
]

# 开发环境允许所有来源（仅用于测试）
CORS_ALLOW_ALL_ORIGINS = True  # 开发环境设置，生产环境应该删除

# CSRF 配置
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8089",
    "http://127.0.0.1:8089",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5175",  # Vite开发服务器
    "http://127.0.0.1:5175",
]
